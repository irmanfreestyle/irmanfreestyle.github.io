{"version":3,"sources":["assets/images/snow.jpg","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","bg","alt","Component","App","props","state","latitude","longitude","url","Promise","resolve","reject","location","window","navigator","geolocation","getCurrentPosition","position","setState","coords","error","console","log","axios","get","this","then","res","catch","err","getCurrentLocation","fetchWeather","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,6OCuB5BC,E,iLAlBP,OACI,6BACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAKC,IAAIC,IAAI,MAAMH,UAAU,eAClC,yBAAKA,UAAU,kBACX,gCAAK,oCACL,yBAAKA,UAAU,iBACX,qCACA,+C,GAVPI,a,yBC6DNC,E,YA1Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,GACVC,UAAW,GACXC,IAAI,sEALW,E,kFASG,IAAD,OACnB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAWC,OAAOC,WAAaD,OAAOC,UAAUC,YAElDH,GACFA,EAASI,oBAAmB,SAACC,GAC3B,EAAKC,SAAS,CACZZ,SAAUW,EAASE,OAAOb,SAC1BC,UAAWU,EAASE,OAAOZ,YAE7BG,OACC,SAACU,GACFC,QAAQC,IAAI,QAASF,GACrBT,Y,+IAQNY,IAAMC,IAAN,4EAA+EC,KAAKpB,MAAMC,SAA1F,YAAsGmB,KAAKpB,MAAME,YAChHmB,MAAK,SAACC,GACLN,QAAQC,IAAIK,MAEbC,OAAM,SAACC,GACNR,QAAQC,IAAIO,M,0QAKRJ,KAAKK,qB,OACXL,KAAKM,e,qIAIL,OACE,yBAAKjC,UAAU,aACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,kBAAb,iB,GAnDMI,aCOE8B,QACW,cAA7BnB,OAAOD,SAASqB,UAEe,UAA7BpB,OAAOD,SAASqB,UAEhBpB,OAAOD,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.dafa83f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snow.ac904ea5.jpg\";","import React, {Component} from 'react'\nimport bg from '../assets/images/snow.jpg'\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"header-wrapper\">\n                    <img src={bg} alt=\"alt\" className=\"header-img\" />\n                    <div className=\"header-content\">\n                        <h1>7<sup> o</sup></h1>\n                        <div className=\"location-text\"> \n                            <div>Snow</div>\n                            <div>Bekasi</div>\n                        </div>\n                    </div>                    \n                </div>\n            </div>\n        )\n    }\n}\n    \n\nexport default Header","import React, {Component} from 'react';\nimport Header from './components/Header'\nimport './assets/css/main.css'\nimport axios from 'axios'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: '',\n      longitude: '',\n      url: `https://api.darksky.net/forecast/4a5bc32592a7f64011804c2494c35d13/`\n    }    \n  }\n\n  getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      const location = window.navigator && window.navigator.geolocation\n\n      if (location) {\n        location.getCurrentPosition((position) => {          \n          this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          })        \n          resolve()\n        }, (error) => {\n          console.log('ERROR', error)\n          reject()\n        })\n      }\n    })  \n  }\n\n  async fetchWeather() {    \n\n    axios.get(`https://api.darksky.net/forecast/0ed69ecf5587e0d2b4fdc11376146152/${this.state.latitude},${this.state.longitude}`)\n    .then((res) => {\n      console.log(res)\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n\n  async componentDidMount() {\n    await this.getCurrentLocation()    \n    this.fetchWeather()\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <Header/>\n          <button className=\"search-btn\">\n            <i className=\"material-icons\">search</i>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}